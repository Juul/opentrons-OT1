{
  "_args": [
    [
      {
        "raw": "debounce@https://registry.npmjs.org/debounce/-/debounce-1.0.2.tgz",
        "scope": null,
        "escapedName": "debounce",
        "name": "debounce",
        "rawSpec": "https://registry.npmjs.org/debounce/-/debounce-1.0.2.tgz",
        "spec": "https://registry.npmjs.org/debounce/-/debounce-1.0.2.tgz",
        "type": "remote"
      },
      "/home/juul/projects/opentrons/git/opentrons-OT1/app"
    ]
  ],
  "_from": "debounce@>=1.0.0 <2.0.0",
  "_id": "debounce@1.0.2",
  "_inCache": true,
  "_location": "/debounce",
  "_phantomChildren": {},
  "_requested": {
    "raw": "debounce@https://registry.npmjs.org/debounce/-/debounce-1.0.2.tgz",
    "scope": null,
    "escapedName": "debounce",
    "name": "debounce",
    "rawSpec": "https://registry.npmjs.org/debounce/-/debounce-1.0.2.tgz",
    "spec": "https://registry.npmjs.org/debounce/-/debounce-1.0.2.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/",
    "/autotrack"
  ],
  "_resolved": "https://registry.npmjs.org/debounce/-/debounce-1.0.2.tgz",
  "_shasum": "503cc674d8d7f737099664fb75ddbd36b9626dc6",
  "_shrinkwrap": null,
  "_spec": "debounce@https://registry.npmjs.org/debounce/-/debounce-1.0.2.tgz",
  "_where": "/home/juul/projects/opentrons/git/opentrons-OT1/app",
  "bugs": {
    "url": "https://github.com/component/debounce/issues"
  },
  "component": {
    "scripts": {
      "debounce/index.js": "index.js"
    }
  },
  "dependencies": {},
  "description": "Creates and returns a new debounced version of the passed function that will postpone its execution until after wait milliseconds have elapsed since the last time it was invoked",
  "devDependencies": {
    "minijasminenode": "^1.1.1",
    "mocha": "*",
    "should": "*",
    "sinon": "^1.17.7"
  },
  "homepage": "https://github.com/component/debounce#readme",
  "keywords": [
    "function",
    "throttle",
    "invoke"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "debounce",
  "optionalDependencies": {},
  "readme": "\n# debounce\n\n  Useful for implementing behavior that should only happen after a repeated action has completed.\n\n## Installation\n\n    $ component install component/debounce\n\n  Or in node:\n\n    $ npm install debounce\n\n## Example\n\n```js\nvar debounce = require('debounce');\nwindow.onresize = debounce(resize, 200);\n\nfunction resize(e) {\n  console.log('height', window.innerHeight);\n  console.log('width', window.innerWidth);\n}\n```\n\nTo later clear the timer and cancel currently scheduled executions:\n```\nwindow.onresize.clear();\n```\n\n## API\n\n### debounce(fn, wait, [ immediate || false ])\n\n  Creates and returns a new debounced version of the passed function that will postpone its execution until after wait milliseconds have elapsed since the last time it was invoked.\n\n  Pass `true` for the `immediate` parameter to cause debounce to trigger the function on the leading edge instead of the trailing edge of the wait interval. Useful in circumstances like preventing accidental double-clicks on a \"submit\" button from firing a second time.\n\n  The debounced function returned also has a property 'clear' that is a function that will clear any scheduled future executions of your function.\n\n## License\n\n  MIT\n\n  Original implementation is from [`underscore.js`](http://underscorejs.org/)\n  which also has an MIT license.\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/component/debounce.git"
  },
  "scripts": {
    "test": "minijasminenode test.js"
  },
  "version": "1.0.2"
}
