{
  "_args": [
    [
      {
        "raw": "electron-settings@https://registry.npmjs.org/electron-settings/-/electron-settings-2.2.4.tgz",
        "scope": null,
        "escapedName": "electron-settings",
        "name": "electron-settings",
        "rawSpec": "https://registry.npmjs.org/electron-settings/-/electron-settings-2.2.4.tgz",
        "spec": "https://registry.npmjs.org/electron-settings/-/electron-settings-2.2.4.tgz",
        "type": "remote"
      },
      "/home/juul/projects/opentrons/git/opentrons-OT1/app"
    ]
  ],
  "_from": "electron-settings@2.2.4",
  "_id": "electron-settings@2.2.4",
  "_inCache": true,
  "_location": "/electron-settings",
  "_phantomChildren": {
    "graceful-fs": "4.1.11",
    "jsonfile": "2.4.0",
    "klaw": "1.3.1",
    "path-is-absolute": "1.0.1",
    "rimraf": "2.6.1"
  },
  "_requested": {
    "raw": "electron-settings@https://registry.npmjs.org/electron-settings/-/electron-settings-2.2.4.tgz",
    "scope": null,
    "escapedName": "electron-settings",
    "name": "electron-settings",
    "rawSpec": "https://registry.npmjs.org/electron-settings/-/electron-settings-2.2.4.tgz",
    "spec": "https://registry.npmjs.org/electron-settings/-/electron-settings-2.2.4.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/electron-settings/-/electron-settings-2.2.4.tgz",
  "_shasum": "76afd53d9a4aac02fc0c2afcafd2533e80478593",
  "_shrinkwrap": null,
  "_spec": "electron-settings@https://registry.npmjs.org/electron-settings/-/electron-settings-2.2.4.tgz",
  "_where": "/home/juul/projects/opentrons/git/opentrons-OT1/app",
  "author": {
    "name": "Nathan Buchar",
    "email": "hello@nathanbuchar.com"
  },
  "bugs": {
    "url": "https://github.com/nathanbuchar/electron-settings/issues"
  },
  "contributors": [
    {
      "name": "Nathan Buchar",
      "email": "hello@nathanbuchar.com",
      "url": "http://nathanbuchar,com/"
    },
    {
      "name": "Kai Eichinger",
      "email": "kai.eichinger@outlook.com"
    }
  ],
  "dependencies": {
    "clone": "^1.0.2",
    "debug": "^2.2.0",
    "deep-equal": "^1.0.1",
    "deep-extend": "^0.4.1",
    "file-exists": "^2.0.0",
    "fs-extra": "^0.30.0",
    "key-path-helpers": "^0.4.0"
  },
  "description": "A simple persistent user settings manager for Electron.",
  "devDependencies": {
    "chai": "^3.5.0",
    "electron-mocha": "^3.0.0",
    "electron-prebuilt": "^1.2.6",
    "mocha": "^3.0.2"
  },
  "homepage": "https://github.com/nathanbuchar/electron-settings#readme",
  "keywords": [
    "electron",
    "app",
    "user",
    "data",
    "settings",
    "manager",
    "config",
    "json",
    "storage",
    "promise",
    "has",
    "get",
    "set",
    "delete",
    "reset",
    "clear"
  ],
  "license": "ISC",
  "main": "index.js",
  "name": "electron-settings",
  "optionalDependencies": {},
  "readme": "electron-settings\n=================\n\n**:warning: Sorry, project not currently in active development. Try [electron-json-storage](https://www.npmjs.com/package/electron-json-storage) :warning:**\n\n***\n\nA simple persistent user settings manager for [Electron][external_electron]. Originally adapted from [Atom's own configuration manager][external_atom-config], electron-settings allows you to save user settings to the disk so that they can be loaded in the next time your app starts.\n\nAlso, you can [observe key paths][method_observe] and get notified if their value changes. So that's pretty neat.\n\n**Note:** v2 is not compatible with earlier versions of electron-settings.\n\n[![npm version](https://badge.fury.io/js/electron-settings.svg)](http://badge.fury.io/js/electron-settings)\n[![dependencies](https://david-dm.org/nathanbuchar/electron-settings.svg)](https://david-dm.org/nathanbuchar/electron-settings)\n[![Build Status](https://travis-ci.org/nathanbuchar/electron-settings.svg?branch=master)](https://travis-ci.org/nathanbuchar/electron-settings)\n[![Join the chat at https://gitter.im/nathanbuchar/electron-settings](https://badges.gitter.im/nathanbuchar/electron-settings.svg)](https://gitter.im/nathanbuchar/electron-settings?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n\n\n***\n\n\n\nInstall\n---------\n\n```\n$ npm install electron-settings\n```\n\n\nQuick Start\n-----------\n\n```js\nconst settings = require('electron-settings');\n\nsettings.set('name', {\n  first: 'Cosmo',\n  last: 'Kramer'\n}).then(() => {\n  settings.get('name.first').then(val => {\n    console.log(val);\n    // => \"Cosmo\"\n  });\n});\n\nsettings.getSettingsFilePath();\n// => /Users/You/Library/Application Support/YourApp/Settings\n```\n\n\nDefault Settings\n----------------\n\nYou can configure default settings by using [`settings.defaults()`][method_defaults]. This will set the defaults object globally. If this is the first time the settings file is being accessed, the defaults will be applied automatically.\n\n```js\nsettings.defaults({\n  foo: 'bar'\n});\n\nsettings.get('foo').then(val => {\n  console.log(val);\n  // => 'bar'\n});\n```\n\nAdditionally, you can use [`applyDefaults()`][method_apply-defaults] or [`resetToDefaults()`][method_reset-to-defaults] to fit your needs.\n\n\n\nFAQ\n---\n\n* **What is a \"key path\"?**\n\n  With electron-settings, you are not just setting keys like you would with local storage. Instead, you are working with a JSON object, and a key path is a string that points to a specific key within that objectâ€”essentially object dot notation in string form.\n\n  For example, in the JSON object below the value at the key path `\"foo.bar\"` is `\"baz\"`.\n\n  ```json\n  {\n    \"foo\": {\n      \"bar\": \"baz\"\n    }\n  }\n  ```\n\n* **Can I use electron-settings in both the main and renderer processes?**\n\n  Yes! Just be aware that if the window closes during an async operation, data may be lost.\n\n* **What data types may be stored?**\n\n  You may set a key path to any value supported by JSON: an object, array, string, number, boolean, or `null`.\n\n* **Why do I have to use promises?**\n\n  electron-settings reads and writes to the file system asynchronously. In order to ensure data integrity, you should use promises. Alternatively, all methods have a synchronous counterpart that you may use instead.\n\n* **Where is the settings file saved?**\n\n  The settings file is named `Settings` and is saved in your app's [user data directory](http://electron.atom.io/docs/api/app/#appgetpathname):\n\n    * `~/Library/Application Support/YourApp` on MacOS.\n    * `%APPDATA%/YourApp` on Windows.\n    * `$XDG_CONFIG_HOME/YourApp` or `~/.config/YourApp` on Linux.\n\n  You can use [`getSettingsFilePath()`][method_get-settings-file-path] to get the full path to the settings file.\n\n\n\n***\n\n\n\nDocumentation\n-------------\n* [Events][docs_events]\n* [Methods][docs_methods]\n\n\nContributors\n-------\n* [Nathan Buchar](mailto:hello@nathanbuchar.com) (Owner)\n* [Kai Eichinger](mailto:kai.eichinger@outlook.com)\n* *You?*\n\n\nLicense\n-------\n[ISC][license]\n\n\n***\n<small>Last updated **Aug. 16th, 2016** by [Nathan Buchar].</small>\n\n<small>**Having trouble?** [Get help on Gitter][external_gitter].</small>\n\n\n\n\n\n\n[license]: ./LICENSE.md\n\n[Nathan Buchar]: mailto:hello@nathanbuchar.com\n\n[section_install]: #install\n[section_quick-start]: #quick-start\n[section_default-settings]: #default-settings\n[section_faq]: #faq\n[section_documentation]: #documentation\n[section_contributors]: #contributors\n[section_license]: #license\n\n[docs_events]: ./docs/events.md\n[docs_methods]: ./docs/methods.md\n\n[method_get-settings-file-path]: ./docs/methods.md#getsettingsfilepath\n[method_observe]: ./docs/methods.md#observe\n[method_defaults]: ./docs/methods.md#defaults\n[method_apply-defaults]: ./docs/methods.md#applydefaults\n[method_reset-to-defaults]: ./docs/methods.md#resettodefaults\n\n[external_electron]: https://electron.atom.com\n[external_atom-config]: https://github.com/atom/atom/blob/master/src/config.coffee\n[external_gitter]: https://gitter.im/nathanbuchar/electron-settings\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/nathanbuchar/electron-settings.git"
  },
  "scripts": {
    "test": "npm run test:main && npm run test:renderer",
    "test:main": "electron-mocha test",
    "test:renderer": "electron-mocha test --renderer"
  },
  "version": "2.2.4"
}
